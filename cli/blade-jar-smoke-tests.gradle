task smokeTests
task testBladeCreateCommandFormField(type: JavaExec)
task testBladeCreateCommandJsTheme(type: JavaExec)
task testBladeCreateCommandListTemplates(type: JavaExec)
task testBladeCreateCommandMvcPortlet(type: JavaExec)
task testBladeGwCommand(type: JavaExec)
task testBladeHelpCommand(type: JavaExec)
task testBladeInitCommand(type: JavaExec)
task testBladeReturnCodeFailure(type: Exec)
task testBladeSamplesCommand(type: JavaExec)
task testBladeVersionCommand(type: JavaExec)

Set<Task> testBladeTasks = tasks.findAll { task -> task.name.startsWith('testBlade') }

testBladeTasks.each { task ->
	task.dependsOn jar

	if (task instanceof JavaExec) {
		task.main = "-jar"
	}
}

smokeTests.dependsOn testBladeTasks

ByteArrayOutputStream errorStream = new ByteArrayOutputStream()
ByteArrayOutputStream standardStream = new ByteArrayOutputStream()

testBladeCreateCommandFormField {
	File testDir = new File(buildDir, "createFormField")

	testDir.mkdirs()

	args = [jar.archivePath, 'create', '-t', 'form-field', 'test-form-field', '-v', '7.2']
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = testDir

	doLast {
		File projectDir = new File(testDir, "test-form-field")

		assert projectDir.exists()
		assert !errorStream.toString().toLowerCase().contains("error")

		errorStream.reset()
		standardStream.reset()
	}
}

testBladeCreateCommandJsTheme {
	File testDir = new File(buildDir, "createJsTheme")

	testDir.mkdirs()

	args = [jar.archivePath, 'create', '-t', 'js-theme', 'test-js-theme']
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = testDir

	doLast {
		File projectDir = new File(testDir, "test-js-theme")

		assert projectDir.exists()
		assert !errorStream.toString().toLowerCase().contains("error")

		errorStream.reset()
		standardStream.reset()
	}
}

testBladeCreateCommandListTemplates {
	args = [jar.archivePath, 'create', '-l']
	errorOutput = errorStream
	standardOutput = standardStream

	doLast {
		assert standardStream.toString().contains("js-theme")
		assert standardStream.toString().contains("js-widget")
		assert standardStream.toString().contains("service-builder")
		assert !errorStream.toString().toLowerCase().contains("error")

		errorStream.reset()
		standardStream.reset()
	}
}

testBladeCreateCommandMvcPortlet {
	File testDir = new File(buildDir, "createMvcPortlet")

	testDir.mkdirs()

	args = [jar.archivePath, 'create', '-t', 'mvc-portlet', 'test-mvc-portlet']
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = testDir

	doLast {
		File projectDir = new File(testDir, "test-mvc-portlet")

		assert projectDir.exists()
		assert !errorStream.toString().toLowerCase().contains("error")

		errorStream.reset()
		standardStream.reset()
	}
}

testBladeGwCommand {
	args = [jar.archivePath, 'gw']
	errorOutput = errorStream
	standardOutput = standardStream

	doLast{
		assert standardStream.toString().contains(gradle.gradleVersion)
		assert !errorStream.toString().toLowerCase().contains("error")

		errorStream.reset()
		standardStream.reset()
	}
}

testBladeHelpCommand {
	args = [jar.archivePath, 'help']
	errorOutput = errorStream
	standardOutput = standardStream

	doLast{
		assert standardStream.toString().contains("init")
		assert !errorStream.toString().toLowerCase().contains("error")

		errorStream.reset()
		standardStream.reset()
	}
}

testBladeInitCommand {
	File initDir = new File(buildDir, "initTest")

	initDir.mkdirs()

	args = [jar.archivePath, 'init', "hello world", "-v", "dxp-7.2-ga1"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast{
		File initProjectDir = new File(initDir, "hello world")

		assert initProjectDir.exists()
		assert !errorStream.toString().toLowerCase().contains("error")

		delete initDir

		errorStream.reset()
		standardStream.reset()
	}
}

testBladeReturnCodeFailure {
	commandLine "java", "-jar", jar.archivePath, "gw", "foo"
	ignoreExitValue = true
	errorOutput = errorStream
	standardOutput = standardStream

	doLast {
		assert execResult.getExitValue() > 0
		assert errorStream.toString().toLowerCase().contains("foo")

		errorStream.reset()
		standardStream.reset()
	}
}

testBladeSamplesCommand {
	args = [jar.archivePath, 'samples', '-v', '7.1']
	standardOutput = standardStream
	errorOutput = errorStream

	doLast{
		assert standardStream.toString().contains("jsp-portlet")
		assert !errorStream.toString().toLowerCase().contains("error")

		errorStream.reset()
		standardStream.reset()
	}
}

testBladeVersionCommand {
	args = [jar.archivePath, 'version']
	standardOutput = standardStream
	errorOutput = errorStream

	doLast{
		String projectVersion = project.version.replaceFirst("-", ".")
		assert !errorStream.toString().toLowerCase().contains("error")
		assert standardStream.toString().contains(projectVersion)

		errorStream.reset()
		standardStream.reset()
	}
}